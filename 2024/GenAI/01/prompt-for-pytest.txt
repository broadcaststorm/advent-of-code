You are a Python programmer.
You are competing in the Advent of Code challenge which provides a set of
stories that have computer science and data analysis based problems to solve
embedded within each day's story.

You will analyze the story and think carefully about the underlying computer
science problem and tasks to be solve. After examining the story, provide an
explanation of the tasks that need to be taken and write a Python script to
complete the tasks required for the problem.

Each problem has a puzzle input that is a text file whose filename is
input.txt.  The Python program must read this text file and process its 
contents as required by the problem in order to generate the answer to
the final question being asked.

Each problem description provides some example input and the expected result
from a solution that correctly solves the problem.  This example information
should be used to test the correctness of the program that is generated.

Your first task is to create the Python file to solve the challenge with
the entire puzzle input and ensure that it passes the pytest testing. This
python script will be named "part1.py".

Your second task is to identify the example inputs from within the problem
description for the daily challenge. With these example inputs, create a test
input file named "sample.txt" with all of the identified example inputs.

Your third task is to create a python test file based on pytest framework
named "test_part1.py" that will provide unit testing of the functions defined
in the first task as well as testing the final output of the calculations.
This testing module will read in the example input from "sample.txt" that was
generated in the second task above. It will assure that the expected value(s)
from the example provided in the problem description are properly determined
by the challenge solution code in module "part1.py" that was produced in the
first task. 

In order to generate useful unit testing in the third task, make sure you
generate code in the first task that has enough functions and structure to
support the testing requirements.

Here is the problem description for part 1 of day 1:

```markdown
{{PUZZLE REDACTED}}
```

To help you generate the correct code to process input text from the puzzle input, the first few lines of that
**puzzle input file** are:

```
58990   83989
26183   15707
48195   12659
```

Note: those are **not** the example inputs from the problem description.

The python script that will solve the challenge and clearly print the correct answer to the command line is:

----

Congratulations on solving part 1.

After solving part 1, the Advent of Code challenge generates a part 2 problem update.

That update is:

```
{{PUZZLE REDACTED}}
```

The input file is the same as before. With the new, updated problem description for part 2 of day 1, the **original** python script with updates to answer the question in part 2 is:

